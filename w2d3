<html>
  <head>
    <title>HTML Document</title>
    <style>
    </style>
  </head>
  <body>
    <h1>Remote Prep Test Page</h1>
    <div id = 'recipe'></div>
    <div id = 'bucket_list'></div>
    
    
    <script src="https://code.jquery.com/jquery-2.1.1.js">
    </script>
    <script>



var recipe = [];

recipe[0] = "dough"
recipe[1] = "marinara sauce"
recipe[2] = "pepperoni"
recipe[3] = "cheese"

//console.log(recipe[0]);

// recipe[4] = recipe.length - 1

var last_step = recipe.length - 1
//console.log(recipe[last_step]);
//console.log(recipe[recipe.length -1]);


//Exercise: Bucket List

//Instantiate a new array and save it to a variable bucket_list
//Use bracket notation with the assignment operator to add two //life goals to your array.
//.push() two goals onto the end of your list.
//.unshift() two goals onto the beginning.
//What is the array's length at this point?
//.pop() off one goal and save it to a variable dying_wish
//.shift() off one goal and save it to a variable do_it_now
//What is the array's length at this point?

var bucket_list = []

bucket_list[0] = 'visit India'
bucket_list[1] = 'complete Hack Reactor'

bucket_list.push('drive a convertible','go to the moon')

bucket_list.unshift('become a chef', 'travel the world')

bucket_list.length

var dying_wish = bucket_list.pop()
var do_it_now = bucket_list.shift()
bucket_list.length;


//Exercise:

/*Use a while loop and jQuery to append each item in your recipe and your bucket list onto a web page.
Refactor your code such that the while loop lives inside a function called append_strings that takes 
an array as an input (argument)
Invoke append_strings twice, passing in recipe the first time and bucket_list the second time
Refactor append_strings such that it takes two arguments: an array of strings, and a string representing 
the CSS selector of the element into which the strings should be appended. (i.e. bucket_list may be 
appended into a #bucket_output div) 

*/

var newArray = [].concat(recipe,bucket_list);
var append_strings = function(array) {
  var i = 0;
  while (i < array.length) {
    $('#recipe').append('<p>' + array[i] + '</p>');
    i++
  }
};
append_strings(newArray);


    </script>
  </body>
</html>





var scrambled_poem = "roses red are bacon crispy i bacon love and is blue violets are"

var scrambled_array = scrambled_poem.split(' ')

var unscrambled_array = [].concat(scrambled_array.shift(), scrambled_array.pop())

unscrambled_array.join(' ')




// Exercise: Favorite Recipe
// Instantiate a new array and save it to a variable recipe
// Use bracket notation to add the steps to create your favorite meal.
// Access the first step of your recipe using bracket notation.
// Create variable called last_step and assign to it a number which represents the index 
// of the last item of your array
// Access the last step of your recipe using the last_step variable
var recipe = [];
recipe[0] = "Step 1. Open Eat24 on your phone.";
recipe[1] = "Step 2. Order food.";
recipe[2] = "Step 3. Tip.";
recipe[3] = "Step 4. So much eat.";
var last_step = 3;
console.log(recipe[last_step]);
// Exercise: Bucket List
// Instantiate a new array and save it to a variable bucket_list
// Use bracket notation with the assignment operator to add two life goals to your array.
// .push() two goals onto the end of your list.
// .unshift() two goals onto the beginning.
// What is the array's length at this point?
// .pop() off one goal and save it to a variable dying_wish
// .shift() off one goal and save it to a variable do_it_now
// What is the array's length at this point?
var bucket_list = [];
bucket_list[0] = "Climb Mt. Kilimanjaro.";
bucket_list[1] = "Order food.";
bucket_list.push("Whittle a corncob pipe.");
bucket_list.push("Master the accordion.");
bucket_list.unshift("Learn about closures.");
bucket_list.unshift("Run an ultramarathon.");
var dying_wish = bucket_list.pop();
var do_it_now = bucket_list.shift();
// Use a while loop and jQuery to append each item in your recipe and your bucket list onto a web page.
// Refactor your code such that the while loop lives inside a function called append_strings that 
// takes an array as an input (argument)
// Invoke append_strings twice, passing in recipe the first time and bucket_list the second time
// Refactor append_strings such that it takes two arguments: an array of strings, 
// and a string representing the CSS selector of the element into which the strings 
// should be appended. (i.e. bucket_list may be appended into a #bucket_output div)
var append_strings = function(array, selector) {
  var i = 0;
  while (i < array.length) {
    $(selector).append(array[i]);
    i++;
  }
};
append_strings(recipe, ".recipe_output");
append_strings(bucket_list, ".bucket_output");




// Exercise:
var scrambled_poem = "roses red are bacon crispy i bacon love and is blue violets are";
// use .split(' ') on scrambled_poem and save the result as an array scrambled_array
// Create a new array unscrambled_array
// While the length of scrambled_array is greater than 0, remove the FIRST and LAST value
// and store add them to unscrambled_array.
// Turn the values in unscrambled_poem into a string by using the array's native .join(' ') method.
var scrambled_array = scrambled_poem.split(' ');
var unscrambled_array = [];
while (scrambled_array.length > 0) {
  unscrambled_array.push(scrambled_array.shift(), scrambled_array.pop());
}
unscrambled_poem = unscrambled_array.join(" ");
console.log(unscrambled_poem);





// Write a function reverser which will take an array of values as an input 
// and return a new array of the same values in reverse order.
// Inside reverser instantiate a new array reversed_array, use a for loop to 
// populate it, then return it from the function.
var reverser = function(array) {
  var reversedArray = [];
  for (var i = 0; i < array.length; i++) {
    reversedArray.unshift(array[i]);
  }
  return reversedArray;
};




// Exercise: Refactor your append_strings function to use .forEach() instead of a while loop.
var append_strings = function(array, selector) {
  array.forEach(function(val) {
    $(selector).append(val);
  });




};
// Exercise: Write a function biggest_smallest that takes an array of numbers as an input, 
// uses .forEach(), and returns an array containing the smallest number in the zeroth position 
// and the largest number in the first position.
var biggest_smallest = function(array) {
  var bs = [array[0], array[0]];
  array.forEach(function(val) {
    if (val < bs[0]) {
      bs[0] = val;
    }
    if (val > bs[1]) {
      bs[1] = val;
    }
  });
};




// Exericise: Create a function array_duplicator, that takes an array as an input, and returns a copy as the output.
var array_duplicator = function(array) {
  return array.slice();
};



// Exericise: Write a function array_combiner that takes two arrays as inputs and 
// returns the two of them smooshed together as an output
var array_combiner = function(firstArr, secondArr) {
  return firstArr.concat(secondArr);
};



// Exercise: Write a function array_plucker that takes an array and an index as inputs and destructively 
// removes the single value at that index. Return that value.
var array_plucker = function(array, index) {
  return array.splice(index, 1);
};




// Exercise: Magic 8-ball

// Create a Magic 8-ball that allows a user to type a question into an input field.
// When the user clicks the "ask question" button, register a click handler function 
// that randomly selects a reply from an array of appropriately vague stock phrases.
// Display the answer inside a glowing circle or something crazy like that.
// Allow the user to click an "ask again" button which clears their previous question and output.
// Refactor your code so that the user doesn't receive the same reply twice until all the replies 
// have been used at least once.

var stockAnswers = ["Yes", "No", "Maybe", "All Signs Point To Yes", "Doubtful", "Ask Again"];
var currentStock = stockAnswers.slice();
var eightBall = function() {
  if (currentStock.length === 0) {
    currentStock = stockAnswers.slice();
  }
  return currentStock.splice(Math.floor(Math.random() * currentStock.length), 1);
};



// Exercise: Shuffler Create a function shuffler that takes an array as input and returns a 
// new array of the same elements in a random order. Is your shuffle perfectly mathematically 
// random or only pseudo-random? How computationally efficient is it- i.e. how many lines of code need to be run?

var shuffler = function(array){
  var original = array.slice();  // so as not to modify the original
  var shuffled = [];
  while (original.length > 0) {
    var randomIndex = Math.floor(Math.random() * original.length);
    shuffled.push(original[randomIndex]);
    // original = original.splice(randomIndex, 1);  // this was an error. it's setting original equal to the spliced number
    original.splice(randomIndex, 1);  // it actually should just splice the number and work with what remains
  }
  return shuffled;
};



// More Exercises:

// Write a function that takes an array of values and returns an boolean representing if 
// the word "hello" exists in the array.
var helloChecker = function(array){
  var helloExists = false;
  array.forEach(function(val){
    if (val === "hello"){
      helloExists = true;
    }
  });
  return helloExists;
};




// Write a function that takes an array of values and a target value and returns how many times 
// that target value exists in the array.
var targetCounter = function(array, target) {
  var counter = 0;
  array.forEach(function(val){
    if (val === target){
      counter++;
    }
  });
  return counter;
};




// Write a function that takes an array and returns a new array containing only the values 
// at odd indexes in that array.
var oddMaker = function(array){
  var oddArray = [];
  array.forEach(function(val, index){
    if (index % 2 !== 0) {
      oddArray.push(val);
    }
  });
  return oddArray;
};




// Write a function called sum_array that takes an array of numbers and returns the sum of 
// all of those numbers added together.
var sum_array = function(array) {
  var total = 0;
  array.forEach(function(val){
    total += val;
  });
  return total;
};




// Write a function called array_math that takes an array of numbers and a string with a 
// mathmatical operator and applies that operator to all the numbers together. 
// array_math([4,2,3], "*") should return 24
var array_math = function(array, string){
  return eval(array.join(string));
};




// Write a zipper function that combines two arrays in alternating order, zipper([1,2,3],['a','b','c']) 
// should return [1, 'a', 2, 'b', 3, 'c']. Make sure to handle cases where one array is longer than the other.
var zipper = function(first, second) {
  var zippedArray = [];
  var length = 0;    
  if (first.length > length) {  // this will include "undefined" placeholders when one array is longer
    length = first.length;      // you can also iterate to the shorter length, then concat the remainder of the longer array
  } else{
    length = second.length;
  }
  for (var i = 0; i < length; i++) {
    zippedArray.push(first[i], second[i]);    
  }
  return zippedArray;
};





// Write a function that merges two sorted lists into a new list. merge_sorted([1, 2, 5, 9], [3, 7, 19]) 
// should return [1, 2, 3, 5, 7, 9, 19]
var merge_sorted = function(first, second){
  var mergedArr = [];
  while (first.length > 0 || second.length > 0){
    if (first[0] < second[0] || second[0] === undefined) {
      mergedArr.push(first.shift());
    } else if (first[0] > second[0] || first[0] === undefined){
      mergedArr.push(second.shift());
    }
  }
  return mergedArr;
};




// Write a function that creates an array of the first 100 Fibonacci numbers.
function fibonacci100() {
  var fibArr = [0, 1];
  var count = 3;
  var previousNumber = 0;
  var currentNumber = 1;
  var temp;
  while (count <= 100) {
    temp = currentNumber;
    currentNumber = currentNumber + previousNumber; // The definition of the fibonacci sequence
    previousNumber = temp;
    fibArr.push(currentNumber);
    count++;
  }
  return fibArr;
}



<!-- Exercise: Magnetic Poetry
Have a grid of words in span.word tags for the user to select from.
Allow users to click on the spans to add that word to a sentence array.
When the user clicks on a "make sentence" button use words.join(' ') to create a string and show it.
Create a "show magic word" button. If the user has used a particular magic word in their sentence 
highlight it for them. Otherwise, tell them that they have not used the magic word.
Have an array of magic words, color the magic words differently.
Allow users to create multiple sentences. Store all of the sentences in an array.
Have "magic word" work on all sentences at once.
 -->


<!DOCTYPE html>
<html lang="en">
<head>
  <script src="https://code.jquery.com/jquery-2.1.1.js"></script>
  <title>Magnetic Poetry</title>
</head>
<body>
  <div id="container">
    <table>
      <tr>
        <td><span class="word">the</span></td>
        <td><span class="word">it</span></td>
        <td><span class="word">she</span></td>
        <td><span class="word">he</span></td>
      </tr>
      <tr>
        <td><span class="word">hack reactor</span></td>
        <td><span class="word">computer</span></td>
        <td><span class="word">array</span></td>
        <td><span class="word">code</span></td>
      </tr>
      <tr>
        <td><span class="word">debugs</span></td>
        <td><span class="word">iterates</span></td>
        <td><span class="word">compiles</span></td>
        <td><span class="word">refactors</span></td>
      </tr>
      <tr>
        <td><span class="word">elegantly</span></td>
        <td><span class="word">spaghetti</span></td>
        <td><span class="word">functional</span></td>
        <td><span class="word">javascript</span></td>
      </tr>
      <tr>
        <td><span class="word">.</span></td>
        <td><span class="word">!</span></td>
        <td><span class="word">,</span></td>
        <td><span class="word">?</span></td>
      </tr>
    </table>
    <br />
    <button id="make">Make Sentence</button>
    <button id="magic">Show Magic Word</button>
  </div>

<script>
var magicWords = ["javascript", "hack reactor"];
var sentence = [];
var allSentences = [];
$(".word").click(function(event){
  var word = this.textContent;
  magicWords.forEach(function(val) {
    if (val === word) {
      word = '<span class="magic">' + word + '</span>'
    }
  });
  sentence.push(word);
});
$("#make").click(function() {
  $("#container").append("<p>" + sentence.join(" ") + "</p>");
  allSentences.push(sentence);
  sentence = [];
  $(".warning").hide();
});
$("#magic").click(function(){
  var magicExists = false;
  allSentences.forEach(function(sent){
    sent.forEach(function(word){
      magicWords.forEach(function(magicWord){
        if (word === magicWord){
          magicExists = true;
        }
      });
    });
  });
  if (magicExists) {
    $(".magic").css("background-color", "blue");
  } else {
    $("#container").append('<span class="warning">"You have not used the magic word!"</span>');
  }
});
</script>

</body>
</html>
